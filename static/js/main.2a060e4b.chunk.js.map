{"version":3,"sources":["components/img/mwa.svg","api/api.js","redux/weather-reducer.js","components/Header/Header.jsx","components/usePosition.jsx","components/Loading.jsx","components/Body/Body.jsx","components/Body/BodyContainer.jsx","components/FormControl.jsx","components/validator.js","components/Search/Search.jsx","App.js","serviceWorker.js","redux/redux-store.js","index.js"],"names":["module","exports","instance","axios","baseURL","appid","weatherAPI","latt","long","get","cityName","initialState","error","coords","weather","setWeather","payload","type","handleError","getParticularCityWeather","dispatch","a","response","data","reset","weatherReducer","state","action","main","temp","Header","useState","position","setPosition","setError","onChange","latitude","longitude","onError","message","useEffect","geo","navigator","geolocation","watcher","watchPosition","clearWatch","usePosition","useDispatch","setCoordinates","Navbar","bg","expand","variant","Brand","href","className","src","wico","alt","Loading","role","Body","props","getWeather","sys","wimage","icon","tempC","Math","round","bgColor","adjustBGColor","min","max","defaultValue","e","updateTemp","Card","style","width","backgroundColor","Img","height","Title","name","country","description","coord","lat","toFixed","lon","BodyContainer","this","PureComponent","compose","connect","Input","input","meta","hasError","touched","required","value","SearchReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","placeholder","Search","formData","city","App","Boolean","window","location","hostname","match","reducers","combineReducers","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.2a060e4b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mwa.751f7d15.svg\";","import * as axios from 'axios';\n\nconst instance = axios.create ({\n    baseURL: 'https://api.openweathermap.org/data/2.5'\n});\nconst appid = 'd21a69f7a784d46986923a31e411755e'\nexport const weatherAPI = {\n    getLocalWeather (latt, long) {\n        return instance.get(`weather?lat=${latt}&lon=${long}&appid=${appid}`)\n    },\n    getParticularCityWeather (cityName) {\n        return instance.get(`weather?q=${cityName}&appid=${appid}`)\n    }   \n}","import {weatherAPI} from './../api/api';\nimport {reset} from 'redux-form';\n\nconst SET_COORDINATES = 'SET_COORDINATES';\nconst SET_WEATHER = 'SET_WEATHER';\nconst UPDATE_TEMPERATURE = 'UPDATE_TEMPERATURE';\nconst HANDLE_ERROR = 'HANDLE_ERROR';\n\nlet initialState = {\n    error: '',\n    coords: { },\n    weather: { },\n}\nconst weatherReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_COORDINATES: {\n            return {\n                ...state,\n                coords: action.coords }\n        }\n        case SET_WEATHER: {\n            return {\n                ...state,\n                weather: action.payload }\n        }\n        case UPDATE_TEMPERATURE: {\n            return {\n                ...state, weather: {...state.weather, main:\n                {...state.weather.main, temp: action.temp }}}\n        }\n        case HANDLE_ERROR: {\n            return {\n                ...state,\n                error: action.error }\n        }\n        default: return state;\n}}\n\nexport const setCoordinates = (coords) => ({ type: SET_COORDINATES, coords });\nexport const setWeather = (payload) => ({ type: SET_WEATHER, payload });\nexport const updateTemp = (temp) => ({ type: UPDATE_TEMPERATURE, temp });\nexport const handleError = (error) => ({ type: HANDLE_ERROR, error });\n\nexport const getWeather = (latt, long) => async (dispatch) => {\n    let response = await weatherAPI.getLocalWeather(latt, long)\n    dispatch(setWeather(response.data))\n};\n\nexport const getParticularCityWeather = (cityName) => async (dispatch) => {\ntry { let response = await weatherAPI.getParticularCityWeather(cityName)\n    dispatch(setWeather(response.data))\n    dispatch(reset('city_name'))\n    dispatch(handleError(''))\n} catch (error) { \n    dispatch(handleError('There is no such city on this planet'))\n    dispatch(reset('city_name'))\n   }\n};\n\nexport default weatherReducer;","import React, {useEffect} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport wico from './../img/mwa.svg';\r\nimport {usePosition} from './../usePosition';\r\nimport {setCoordinates} from './../../redux/weather-reducer';\r\n\r\n\r\nconst Header = () => {\r\n\r\n  const {latitude, longitude, error} = usePosition();\r\n  const dispatch = useDispatch();\r\n \r\n  useEffect( () => {\r\n    const coords = {latitude, longitude}\r\n    dispatch(setCoordinates(coords))\r\n        }, [latitude, longitude])\r\n    \r\n    \r\nreturn (\r\n  <div>\r\n    <Navbar bg=\"primary\" expand=\"lg\" variant=\"dark\">\r\n      <Navbar.Brand href=\"/\">\r\n        <img className=\"wicustom\" src={wico} alt=\"wico\" />\r\n          Geolocation Weather App {error ? \r\n          <span className=\"alert-warning\">{error}</span> : null}\r\n      </Navbar.Brand>\r\n    </Navbar>\r\n\r\n  </div>\r\n    \r\n)\r\n}\r\n\r\nexport default Header;\r\n","import {useState, useEffect} from 'react';\n\nexport const usePosition = () => {\n    const [position, setPosition] = useState({});\n    const [error, setError] = useState(null);\n\n    const onChange = ({coords}) => {\n        setPosition({\n            latitude: coords.latitude,\n            longitude: coords.longitude,\n        });\n    };\n    const onError = (error) => {\n        setError(error.message);\n    };\n    useEffect(() => {\n        const geo = navigator.geolocation;\n        if (!geo) {\n            setError('Geolocation is not supported');\n            return;\n        }\n        const watcher = geo.watchPosition(onChange, onError);\n        return () => geo.clearWatch(watcher);\n    }, []);\n    return { ...position, error };\n}","import React from 'react';\n\nconst Loading = () => {\nreturn (\n<div className=\"spinner-border\" role=\"status\">\n  <span className=\"sr-only\">Loading...</span>\n</div>\n)\n}\n\nexport default Loading;","import React, {useEffect} from 'react'\nimport Card from 'react-bootstrap/Card'\nimport Loading from './../Loading';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\nconst Body = (props) => {\nconst latitude = props.coords.latitude\nconst longitude = props.coords.longitude\n\nuseEffect( () => {\nif (latitude){\nprops.getWeather(latitude, longitude)\n}}, [latitude, longitude])\n\nif (!props.weather.sys) {return <Loading />}\n\nconst wimage = (`http://openweathermap.org/img/wn/${props.weather.weather[0].icon}@2x.png`)\nconst tempC = Math.round(props.weather.main.temp-273.15)\n\nconst adjustBGColor = (tempC) => {\n//    console.log(\"TEMPC\", tempC);\n    let bgColor=''\n    switch (true) {\n        \n        case tempC <= -10:\n            bgColor= '#00ffff' \n            break\n        case  tempC > -10 && tempC <= 10:\n            bgColor= '#fff700'\n            break\n        case  tempC > 30:\n            bgColor= '#ff8c00';\n            break\n        default: bgColor= '#ffc800'\n        break;\n    }\n//    console.log(\"COLOR\", bgColor);\n    return bgColor\n}\n\nconst updateTemp =(e) => {\n    props.updateTemp(e+273.15)\n}\nconst bgColor = adjustBGColor(tempC)\n    \nreturn (\n<div className=\"center\">\n    <div className=\"mySlider\">\n        <Slider min={-15} max={40} defaultValue={tempC} onChange={updateTemp} />\n    </div>\n        <div> {props.error && <span>{props.error}</span> } </div>\n    <div>\n        <Card style={{ width: '14rem', backgroundColor: bgColor }}>\n            <Card.Img variant=\"top\" src={wimage} width=\"5\" height=\"230\" />\n            <Card.Body>\n                <Card.Title>{props.weather.name} , {props.weather.sys.country}</Card.Title>\n\n                <div>\n                    <span className=\"badge badge-info\"> {tempC}°С </span>\n                    <span className=\"badge badge-info\"> {props.weather.weather[0].description} </span>\n                    <div> latitude : {props.weather.coord.lat.toFixed(2)} </div>\n                    <div> longitude : {props.weather.coord.lon.toFixed(2)} </div>\n                </div>\n            </Card.Body>\n        </Card>\n    </div>\n</div>\n)}\n\nexport default Body;","import React, {PureComponent} from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport Body from './Body';\nimport {getWeather, getParticularCityWeather, updateTemp} from './../../redux/weather-reducer';\n\n\nclass BodyContainer extends PureComponent {\n    \n    render () {\n        return <> \n            <Body error={this.props.error}\n            coords={this.props.coords}\n            getWeather={this.props.getWeather}\n            weather={this.props.weather}\n            getParticularCityWeather={this.props.getParticularCityWeather}\n            updateTemp={this.props.updateTemp}/>        \n    </>\n}\n}\n\nconst mapStateToProps = (state) =>({\n    error: state.weather.error,\n    coords: state.weather.coords,\n    weather: state.weather.weather,\n})\n\nexport default compose (\n    \n    connect (mapStateToProps, {getWeather, getParticularCityWeather, updateTemp})\n) (BodyContainer)","import React from 'react';\n\nexport const Input = ({input, meta, ...props}) => {\n\nconst hasError = meta.touched && meta.error;\n\nreturn (\n<>\n    <input {...input} {...props} className={\"form-control\" + ' ' + \n        (hasError ? \"is-invalid\" : \"\" )} />\n    { hasError &&\n    <div className=\"invalid-feedback\">\n        Required field\n    </div> }\n</>\n\n)\n}","export const required = value => {\n    if (value) return undefined;\n\n    return \"Required field\";\n}","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport {Input} from './../FormControl';\nimport {required} from './../validator';\nimport {useDispatch} from \"react-redux\";\nimport {getParticularCityWeather} from './../../redux/weather-reducer';\n\nconst SearchForm = (props) => {\nreturn (\n<div className=\"form-inline\">\n    <form onSubmit={props.handleSubmit}>\n        <Field name=\"city\" type=\"text\" component={Input} validate={[required]}\n            placeholder=\"Enter city name\" />\n\n        <button className=\"btn btn-primary btn-sm \">\n            Search\n        </button>\n\n    </form>\n</div>\n)\n}\nconst SearchReduxForm = reduxForm({form: 'city_name'})(SearchForm);\n\nconst Search = (props) => {\nconst dispatch = useDispatch();\nconst pushSubmit = (formData) => {\ndispatch(getParticularCityWeather(formData.city))\n}\nreturn (\n<div className=\"center mt20\">\n    <SearchReduxForm onSubmit={pushSubmit} />\n</div>\n)\n}\n\nexport default Search;","import React from 'react';\nimport './App.scss';\nimport Header from './components/Header/Header'\nimport BodyContainer from './components/Body/BodyContainer';\nimport Search from './components/Search/Search';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <BodyContainer />\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore, compose, applyMiddleware} from \"redux\";\nimport thunkMiddleware from 'redux-thunk';\nimport { reducer as formReducer } from 'redux-form';\nimport weatherReducer from \"./weather-reducer\";\n\nlet reducers = combineReducers ({\n    form: formReducer,\n    weather: weatherReducer\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/redux-store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}